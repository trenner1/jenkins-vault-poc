pipeline {
  agent any
  environment {
    // Jenkins → Vault inside your compose network
    VAULT_ADDR = 'http://vault:8200'
  }

  stages {
    stage('JWT → Vault login & child token') {
      steps {
        withCredentials([file(credentialsId: 'jenkins-oidc-privkey', variable: 'JWT_KEY')]) {
          sh '''
            set -eu

            b64url() { openssl base64 -A | tr "+/" "-_" | tr -d "="; }

            # --- Build JWT header
            printf '{"alg":"RS256","typ":"JWT","kid":"jenkins-dev-key-1"}' > /tmp/h.json
            H=$(b64url < /tmp/h.json)

            # --- Build JWT payload (claims must match Vault role bindings)
            IAT=$(date +%s); EXP=$((IAT+900))
            JOB="${JOB_NAME:-}"; REPO="${GIT_URL:-}"; BR="${BRANCH_NAME:-}"
            BID="${BUILD_ID:-}"; COM="${GIT_COMMIT:-}"

            jq -n \
              --arg iss "http://localhost:8080" \
              --arg sub "jenkins-dev" \
              --arg aud "vault" \
              --arg env "dev" \
              --arg job "$JOB" \
              --arg repo "$REPO" \
              --arg branch "$BR" \
              --arg build "$BID" \
              --arg commit "$COM" \
              --argjson iat "$IAT" \
              --argjson exp "$EXP" \
              '{iss:$iss,sub:$sub,aud:$aud,iat:$iat,exp:$exp,env:$env,
                jenkins_job:$job,repo:$repo,branch:$branch,build_id:$build,commit:$commit}' > /tmp/p.json
            P=$(b64url < /tmp/p.json)

            # --- Sign JWT with private key stored in Jenkins credentials
            SIG=$(printf "%s.%s" "$H" "$P" | openssl dgst -sha256 -sign "$JWT_KEY" -binary | b64url)
            ID_TOKEN="$H.$P.$SIG"

            # --- Login to Vault via JWT auth
            LOGIN_RESP=$(curl -s -X POST "$VAULT_ADDR/v1/auth/jenkins-jwt/login" \
              -H 'Content-Type: application/json' \
              -d '{"role":"dev-builds","jwt":"'"$ID_TOKEN"'"}')
            VAULT_TOKEN=$(echo "$LOGIN_RESP" | jq -r .auth.client_token)
            [ "$VAULT_TOKEN" != "null" ] && [ -n "$VAULT_TOKEN" ] || { echo "Vault login failed"; echo "$LOGIN_RESP" | jq .; exit 1; }

            # --- Create a short-lived child token with rich meta (policy: jenkins-dev)
            REQ=$(jq -n \
              --arg job "$JOB" \
              --arg bid "$BID" \
              --arg repo "$REPO" \
              --arg branch "$BR" \
              --arg commit "$COM" \
              '{
                ttl: "15m",
                num_uses: 4,
                policies: ["jenkins-dev"],
                meta: {
                  job: $job,
                  build_id: $bid,
                  repo: $repo,
                  branch: $branch,
                  commit: $commit,
                  env: "dev",
                  signing_kid: "jenkins-dev-key-1"
                }
              }')

            RESP=$(printf "%s" "$REQ" | curl -s \
              -H "X-Vault-Token: $VAULT_TOKEN" \
              -X POST "$VAULT_ADDR/v1/auth/token/create/jenkins-child" \
              -d @-)

            CHILD=$(echo "$RESP" | jq -r '.auth.client_token')
            [ "$CHILD" != "null" ] && [ -n "$CHILD" ] || { echo "child token create failed"; echo "$RESP" | jq .; exit 1; }

            printf "VAULT_TOKEN=%s\n" "$CHILD" > .vault_token
          '''
        }
      }
    }
    
    stage('Read dev secret (scoped by job)') {
      steps {
        sh '''
          set -eu
          . ./.vault_token
          echo "Reading kv/dev/apps/$JOB_NAME/example (v2 data endpoint)"
          RESP=$(curl -s -H "X-Vault-Token: $VAULT_TOKEN" \
            "$VAULT_ADDR/v1/kv/data/dev/apps/$JOB_NAME/example")
          # v2 returns your fields under .data.data
          echo "$RESP" | jq '.data.data'
        '''

      }
    }

    stage('Negative test (expect 403)') {
      steps {
        sh '''
          set -eu
          . ./.vault_token
          OTHER="SomeOtherJob"
          CODE=$(curl -s -o /tmp/resp.json -w "%{http_code}" \
            -H "X-Vault-Token: $VAULT_TOKEN" \
            "$VAULT_ADDR/v1/kv/data/dev/apps/$OTHER/example")
          echo "HTTP=$CODE"
          cat /tmp/resp.json; echo
        '''
      }
    }

    stage('Show TTL') {
      steps {
        sh '''
          set -eu
          . ./.vault_token
          RESP=$(curl -s -X POST -H "X-Vault-Token: $VAULT_TOKEN" \
            "$VAULT_ADDR/v1/auth/token/lookup-self")
          echo "$RESP" | jq '.data.ttl, .data.policies, .data.meta'
        '''
      }
    }

  }

  post {
    always { 
            sh '''
                  if [ -f ./.vault_token ]; then
                    . ./.vault_token
                    curl -s -X POST -H "X-Vault-Token: $VAULT_TOKEN" \
                      "$VAULT_ADDR/v1/auth/token/revoke-self" || true
                  fi
                  rm -f .vault_token || true
                ''' 
        
    }
  }
}
