#!/usr/bin/env bash
set -euo pipefail

# Bootstrap Vault: run `vault operator init` inside the running vault container,
# save unseal keys and the initial root token to vault-keys.txt with secure perms.
# This script will NOT overwrite an existing vault-keys.txt.

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

VAULT_KEYS_FILE="${VAULT_KEYS_FILE:-$REPO_ROOT/vault-keys.txt}"
KEY_SHARES="${KEY_SHARES:-5}"
KEY_THRESHOLD="${KEY_THRESHOLD:-3}"
CONTAINER_NAME="${VAULT_CONTAINER_NAME:-vault}"

if [[ -f "$VAULT_KEYS_FILE" ]]; then
  echo "Vault keys file already exists at: $VAULT_KEYS_FILE â€” skipping init"
  exit 0
fi

echo "Bootstrapping Vault: running operator init inside container: $CONTAINER_NAME"

# Ensure container is running
if ! docker ps --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
  echo "Error: container '$CONTAINER_NAME' is not running. Start containers first."
  exit 2
fi

# Run init and capture JSON output
INIT_JSON=$(docker exec "$CONTAINER_NAME" sh -c "vault operator init -format=json -key-shares=$KEY_SHARES -key-threshold=$KEY_THRESHOLD")

if [[ -z "$INIT_JSON" ]]; then
  echo "Error: vault operator init returned no output"
  exit 3
fi

# Write to VAULT_KEYS_FILE with restricted perms in format compatible with unseal-vault.sh
mkdir -p "$(dirname "$VAULT_KEYS_FILE")"
umask 077

# Extract data from JSON and write in text format that unseal-vault.sh expects
ROOT_TOKEN=$(printf '%s' "$INIT_JSON" | jq -r '.root_token')
UNSEAL_KEYS=($(printf '%s' "$INIT_JSON" | jq -r '.unseal_keys_b64[]'))

cat > "$VAULT_KEYS_FILE" <<EOF
# Vault Initialization Information
# ================================
# Date: $(date +%Y-%m-%d)
# IMPORTANT: Keep these keys secure!

## Unseal Keys (need any $KEY_THRESHOLD of $KEY_SHARES to unseal):
Unseal Key 1: ${UNSEAL_KEYS[0]}
Unseal Key 2: ${UNSEAL_KEYS[1]}
Unseal Key 3: ${UNSEAL_KEYS[2]}
Unseal Key 4: ${UNSEAL_KEYS[3]}
Unseal Key 5: ${UNSEAL_KEYS[4]}

## Root Token:
Initial Root Token: $ROOT_TOKEN

## Recovery Information:
# This file was auto-generated by bootstrap-vault.sh on $(date)
# Key shares: $KEY_SHARES
# Key threshold: $KEY_THRESHOLD
EOF

chmod 600 "$VAULT_KEYS_FILE"

echo "Wrote Vault init output to: $VAULT_KEYS_FILE"

# Update .env file with new root token
ENV_FILE="$(dirname "$VAULT_KEYS_FILE")/.env"
if [[ -f "$ENV_FILE" ]]; then
    echo "Updating VAULT_TOKEN in $ENV_FILE..."
    # Create a backup of the .env file
    cp "$ENV_FILE" "$ENV_FILE.backup.$(date +%s)"
    
    # Update or add VAULT_TOKEN in .env file
    if grep -q "^VAULT_TOKEN=" "$ENV_FILE"; then
        # Replace existing VAULT_TOKEN
        sed -i.bak "s/^VAULT_TOKEN=.*/VAULT_TOKEN=$ROOT_TOKEN/" "$ENV_FILE" && rm "$ENV_FILE.bak"
    else
        # Add VAULT_TOKEN if it doesn't exist
        echo "VAULT_TOKEN=$ROOT_TOKEN" >> "$ENV_FILE"
    fi
    echo "Updated .env file with new VAULT_TOKEN"
else
    echo "Warning: .env file not found at $ENV_FILE"
fi

# Print short summary (Initial Root Token and first 3 unseal keys)
echo "Initial Root Token: ${ROOT_TOKEN}"
echo "Unseal keys (first 3):"
printf '%s\n' "${UNSEAL_KEYS[0]}" "${UNSEAL_KEYS[1]}" "${UNSEAL_KEYS[2]}"

echo "Bootstrap complete. Keep $VAULT_KEYS_FILE secure and do not commit it."

exit 0
